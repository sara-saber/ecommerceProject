{"ast":null,"code":"import { map } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ResourceService {\n  constructor(http, tConstructor, apiUrl) {\n    this.http = http;\n    this.tConstructor = tConstructor;\n    this.apiUrl = apiUrl;\n  }\n  resolve(route, state) {\n    return this.getAll();\n  }\n  add(resource) {\n    return this.http.post(`${this.apiUrl}`, resource.toJson()).pipe(map(result => new this.tConstructor(result)));\n  }\n  getAll() {\n    return this.http.get(`${this.apiUrl}`).pipe(map(result => result.map(i => new this.tConstructor(i))));\n  }\n  getById(id) {\n    return this.http.get(`${this.apiUrl}/${id}`).pipe(map(result => new this.tConstructor(result)));\n  }\n  update(resource) {\n    return this.http.put(`${this.apiUrl}/${resource.id}`, resource.toJson()).pipe(map(result => new this.tConstructor(result)));\n  }\n  delete(id) {\n    return this.http.delete(`${this.apiUrl}/${id}`);\n  }\n}\nResourceService.ɵfac = function ResourceService_Factory(t) {\n  i0.ɵɵinvalidFactory();\n};\nResourceService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ResourceService,\n  factory: ResourceService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAGA,SAASA,GAAG,QAAyB,MAAM;;;AAM3C,OAAM,MAAgBC,eAAe;EACnCC,YACUC,IAAe,EACfC,YAA4D,EAC1DC,MAAc;IAFhB,SAAI,GAAJF,IAAI;IACJ,iBAAY,GAAZC,YAAY;IACV,WAAM,GAANC,MAAM;EACf;EACHC,OAAO,CAACC,KAA6B,EAAEC,KAA0B;IAChE,OAAO,IAAI,CAACC,MAAM,EAAE;EAErB;EAEOC,GAAG,CAACC,QAA0C;IACnD,OAAO,IAAI,CAACR,IAAI,CACbS,IAAI,CAAI,GAAG,IAAI,CAACP,MAAM,EAAE,EAAEM,QAAQ,CAACE,MAAM,EAAE,CAAC,CAC5CC,IAAI,CAACd,GAAG,CAAEe,MAAM,IAAK,IAAI,IAAI,CAACX,YAAY,CAACW,MAAM,CAAC,CAAC,CAAC;EACzD;EAEON,MAAM;IACX,OAAO,IAAI,CAACN,IAAI,CACba,GAAG,CAAM,GAAG,IAAI,CAACX,MAAM,EAAE,CAAC,CAC1BS,IAAI,CAACd,GAAG,CAAEe,MAAM,IAAKA,MAAM,CAACf,GAAG,CAAEiB,CAAC,IAAK,IAAI,IAAI,CAACb,YAAY,CAACa,CAAC,CAAC,CAAC,CAAC,CAAC;EACvE;EAEOC,OAAO,CAACC,EAAU;IACvB,OAAO,IAAI,CAAChB,IAAI,CACba,GAAG,CAAI,GAAG,IAAI,CAACX,MAAM,IAAIc,EAAE,EAAE,CAAC,CAC9BL,IAAI,CAACd,GAAG,CAAEe,MAAM,IAAK,IAAI,IAAI,CAACX,YAAY,CAACW,MAAM,CAAC,CAAC,CAAC;EACzD;EAEOK,MAAM,CAACT,QAA0C;IACtD,OAAO,IAAI,CAACR,IAAI,CACbkB,GAAG,CAAI,GAAG,IAAI,CAAChB,MAAM,IAAIM,QAAQ,CAACQ,EAAE,EAAE,EAAER,QAAQ,CAACE,MAAM,EAAE,CAAC,CAC1DC,IAAI,CAACd,GAAG,CAAEe,MAAM,IAAK,IAAI,IAAI,CAACX,YAAY,CAACW,MAAM,CAAC,CAAC,CAAC;EACzD;EAEOO,MAAM,CAACH,EAAU;IACtB,OAAO,IAAI,CAAChB,IAAI,CAACmB,MAAM,CAAO,GAAG,IAAI,CAACjB,MAAM,IAAIc,EAAE,EAAE,CAAC;EACvD;;AArCoBlB,eAAe;;;AAAfA,eAAe;SAAfA,eAAe;EAAAsB,SAAftB,eAAe;EAAAuB,YAFvB;AAAM","names":["map","ResourceService","constructor","http","tConstructor","apiUrl","resolve","route","state","getAll","add","resource","post","toJson","pipe","result","get","i","getById","id","update","put","delete","factory","providedIn"],"sourceRoot":"","sources":["D:\\Projects\\proje1\\src\\app\\modules\\shared\\services\\resource.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { ResourceModel } from '../models/generic-model';\nimport { map, Observable, tap } from 'rxjs';\nimport { ActivatedRouteSnapshot, Resolve, ResolveEnd, ResolveStart, RouterStateSnapshot } from '@angular/router';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport abstract class ResourceService <T extends ResourceModel<T>> implements Resolve<T[]>{\n  constructor(\n    private http:HttpClient,\n    private tConstructor: { new (m: Partial<T>, ...args: unknown[]): T },\n    protected apiUrl: string\n  ) {}\n  resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot):  Observable<T[]>{\n   return this.getAll()\n  \n  }\n\n  public add(resource: Partial<T> & { toJson: () => T }): Observable<T> {\n    return this.http\n      .post<T>(`${this.apiUrl}`, resource.toJson())\n      .pipe(map((result) => new this.tConstructor(result)));\n  }\n\n  public getAll(): Observable<T[]> {\n    return this.http\n      .get<T[]>(`${this.apiUrl}`)\n      .pipe(map((result) => result.map((i) => new this.tConstructor(i))));\n  }\n\n  public getById(id: string): Observable<T> {\n    return this.http\n      .get<T>(`${this.apiUrl}/${id}`)\n      .pipe(map((result) => new this.tConstructor(result)));\n  }\n\n  public update(resource: Partial<T> & { toJson: () => T }): Observable<T> {\n    return this.http\n      .put<T>(`${this.apiUrl}/${resource.id}`, resource.toJson())\n      .pipe(map((result) => new this.tConstructor(result)));\n  }\n\n  public delete(id: string): Observable<void> {\n    return this.http.delete<void>(`${this.apiUrl}/${id}`);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}